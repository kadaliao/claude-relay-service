#!/usr/bin/env node

/**
 * ÊµãËØï webhook-reporter ÈÖçÁΩÆËØªÂèñ
 * È™åËØÅÁéØÂ¢ÉÂèòÈáèÊòØÂê¶Ê≠£Á°ÆËß£Êûê
 */

// Ê®°ÊãüÁî®Êà∑ÁöÑÁéØÂ¢ÉÂèòÈáè
process.env.DASHBOARD_CHART_API_KEY_USAGE = 'true'
process.env.DASHBOARD_CHART_API_KEY_COST = 'true'
process.env.DASHBOARD_CHART_API_KEY_ACTIVITY = 'false'
process.env.DASHBOARD_CHART_SYSTEM_OVERVIEW = 'false'
process.env.DASHBOARD_CHART_MODEL_DISTRIBUTION = 'false'
process.env.DASHBOARD_CHART_USAGE_TREND = 'false'
process.env.DASHBOARD_CHART_API_KEYS_TREND = 'false'

const { loadConfig } = require('./src/config')

console.log('üß™ Testing webhook-reporter configuration loading...\n')

try {
  const config = loadConfig()
  
  console.log('üìã Configuration test results:')
  console.log('=====================================')
  
  const enabled = config.charts.enabled
  
  // Ê£ÄÊü•ÊØè‰∏™ÂõæË°®ÈÖçÁΩÆ
  const tests = [
    { name: 'systemOverview', expected: false, actual: enabled.systemOverview },
    { name: 'modelDistribution', expected: false, actual: enabled.modelDistribution },
    { name: 'usageTrend', expected: false, actual: enabled.usageTrend },
    { name: 'apiKeysTrend', expected: false, actual: enabled.apiKeysTrend },
    { name: 'apiKeyUsage', expected: true, actual: enabled.apiKeyUsage },
    { name: 'apiKeyCost', expected: true, actual: enabled.apiKeyCost },
    { name: 'apiKeyActivity', expected: false, actual: enabled.apiKeyActivity }
  ]
  
  let allPassed = true
  
  tests.forEach(test => {
    const passed = test.expected === test.actual
    const status = passed ? '‚úÖ PASS' : '‚ùå FAIL'
    const expected = test.expected ? 'ENABLED' : 'DISABLED'
    const actual = test.actual ? 'ENABLED' : 'DISABLED'
    
    console.log(`${status} ${test.name}: expected ${expected}, got ${actual}`)
    
    if (!passed) {
      allPassed = false
    }
  })
  
  console.log('=====================================')
  
  if (allPassed) {
    console.log('üéâ All configuration tests PASSED!')
    console.log('‚úÖ Only apiKeyUsage and apiKeyCost are enabled')
    console.log('‚úÖ All other charts are correctly disabled')
  } else {
    console.log('‚ùå Some configuration tests FAILED!')
    console.log('‚ö†Ô∏è  Check environment variable parsing logic')
  }
  
  console.log('\nüìä Expected chart generation:')
  console.log('  - API Keys Daily Usage Statistics (apiKeyUsage)')
  console.log('  - API Keys Cost Distribution (apiKeyCost)')
  console.log('  - Total charts to generate: 2')
  
} catch (error) {
  console.error('‚ùå Configuration loading failed:', error.message)
  process.exit(1)
}